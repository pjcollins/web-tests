//
// TlsTestXamDevNewData.cs
//
// Author:
//       Martin Baulig <martin.baulig@xamarin.com>
//
// Copyright (c) 2017 Xamarin Inc. (http://www.xamarin.com)

//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
using System;

namespace Xamarin.WebTests.Resources
{
	public class TlsTestXamDevNewData : CertificateInfo
	{
		public TlsTestXamDevNewData (byte[] rawData)
			: base (CertificateResourceType.TlsTestXamDevExpired2, rawData)
		{
		}

		const string subject = "/CN=*.xamdev.com";
		const string issuer = "/C=US/ST=Washington/L=Redmond/O=Microsoft Corporation/OU=Microsoft IT/CN=Microsoft IT SSL SHA2";
		const string managedSubject = "CN=*.xamdev.com";
		const string managedIssuer = "CN=Microsoft IT SSL SHA2, OU=Microsoft IT, O=Microsoft Corporation, L=Redmond, S=Washington, C=US";

		internal static readonly byte[] hash = {
			0x97, 0x7c, 0x09, 0x37, 0x30, 0x93, 0xec, 0xda, 0xe1, 0x2a, 0xe4, 0xc3, 0x1e, 0xe4, 0x5e, 0x4b,
			0xf7, 0xbd, 0x21, 0xc1
		};

		internal static readonly byte[] subject_rawData = {
			0x30, 0x17, 0x31, 0x15, 0x30, 0x13, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x0c, 0x2a, 0x2e, 0x78,
			0x61, 0x6d, 0x64, 0x65, 0x76, 0x2e, 0x63, 0x6f, 0x6d
		};
		internal static readonly byte[] subject_rawDataCanon = {
			0x31, 0x15, 0x30, 0x13, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x0c, 0x2a, 0x2e, 0x78, 0x61, 0x6d,
			0x64, 0x65, 0x76, 0x2e, 0x63, 0x6f, 0x6d
		};

		internal static readonly byte[] issuer_rawData = {
			0x30, 0x81, 0x8b, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53,
			0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x08, 0x13, 0x0a, 0x57, 0x61, 0x73, 0x68, 0x69,
			0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x07, 0x13, 0x07,
			0x52, 0x65, 0x64, 0x6d, 0x6f, 0x6e, 0x64, 0x31, 0x1e, 0x30, 0x1c, 0x06, 0x03, 0x55, 0x04, 0x0a,
			0x13, 0x15, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x43, 0x6f, 0x72, 0x70,
			0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x15, 0x30, 0x13, 0x06, 0x03, 0x55, 0x04, 0x0b,
			0x13, 0x0c, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x49, 0x54, 0x31, 0x1e,
			0x30, 0x1c, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x15, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f,
			0x66, 0x74, 0x20, 0x49, 0x54, 0x20, 0x53, 0x53, 0x4c, 0x20, 0x53, 0x48, 0x41, 0x32
		};
		internal static readonly byte[] issuer_rawDataCanon = {
			0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x0c, 0x02, 0x75, 0x73, 0x31, 0x13, 0x30,
			0x11, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x0a, 0x77, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x74,
			0x6f, 0x6e, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x07, 0x72, 0x65, 0x64,
			0x6d, 0x6f, 0x6e, 0x64, 0x31, 0x1e, 0x30, 0x1c, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x15, 0x6d,
			0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61,
			0x74, 0x69, 0x6f, 0x6e, 0x31, 0x15, 0x30, 0x13, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x0c, 0x6d,
			0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x69, 0x74, 0x31, 0x1e, 0x30, 0x1c, 0x06,
			0x03, 0x55, 0x04, 0x03, 0x0c, 0x15, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x20,
			0x69, 0x74, 0x20, 0x73, 0x73, 0x6c, 0x20, 0x73, 0x68, 0x61, 0x32
		};

		static readonly CertificateNameInfo subjectName = new CertificateNameInfo (
			0x313c0c91L, 0xd1ac2f71L, subject_rawData, subject_rawDataCanon, subject);
		static readonly CertificateNameInfo issuerName = new CertificateNameInfo (
			0x7ae89a3aL, 0xe31e7f12L, issuer_rawData, issuer_rawDataCanon, issuer);

		static readonly DateTime notBefore = new DateTime (2017, 3, 13, 17, 39, 59, DateTimeKind.Utc);
		static readonly DateTime notAfter = new DateTime (2018, 3, 13, 17, 39, 59, DateTimeKind.Utc);

		internal static readonly byte[] serial = {
			0x5a, 0x00, 0x07, 0x19, 0x02, 0x8b, 0x47, 0xdf, 0xf9, 0xc1, 0x76, 0x81, 0x77, 0x00, 0x01, 0x00,
			0x07, 0x19, 0x02
		};

		internal static readonly byte[] serialMono = {
			0x02, 0x19, 0x07, 0x00, 0x01, 0x00, 0x77, 0x81, 0x76, 0xc1, 0xf9, 0xdf, 0x47, 0x8b, 0x02, 0x19,
			0x07, 0x00, 0x5a
		};

		internal static readonly byte[] publicKeyData = {
			0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xa8, 0x03, 0xe5, 0x9a, 0x14, 0x07, 0x9b,
			0x41, 0x9e, 0x1b, 0x0a, 0xb0, 0xc1, 0x7f, 0xb5, 0xd1, 0x59, 0x75, 0x5b, 0xd4, 0xe1, 0xd8, 0xba,
			0xcd, 0x77, 0xff, 0xb5, 0xe9, 0x15, 0x8f, 0x7d, 0xf3, 0x98, 0x32, 0x4f, 0x5d, 0x07, 0x8b, 0x31,
			0x01, 0x54, 0xde, 0xea, 0xd7, 0x3f, 0x48, 0xe0, 0x37, 0x2f, 0x6a, 0xde, 0x8b, 0x70, 0x63, 0x93,
			0xbd, 0xc8, 0xd5, 0x75, 0x7d, 0x2c, 0x28, 0xd0, 0xe0, 0x9c, 0xc7, 0x39, 0xf4, 0x96, 0x24, 0x15,
			0x79, 0xac, 0xdf, 0xb5, 0x7b, 0x9d, 0xb2, 0x98, 0xd3, 0xe2, 0x28, 0xf4, 0x9e, 0x6b, 0x20, 0x9a,
			0xaf, 0x6e, 0x1b, 0x98, 0x63, 0x1f, 0x41, 0xa3, 0xeb, 0xfb, 0x8d, 0x4b, 0x39, 0x9d, 0x60, 0x09,
			0x8b, 0xe0, 0x9a, 0x9f, 0x79, 0x76, 0x4b, 0xb6, 0x09, 0x64, 0x52, 0x9c, 0xd5, 0x9e, 0x40, 0x03,
			0xa7, 0x4f, 0x0f, 0x7a, 0x3a, 0xca, 0x05, 0xb7, 0x25, 0x76, 0x94, 0xd3, 0xe2, 0xe7, 0x55, 0x52,
			0xc3, 0xae, 0x53, 0xd3, 0x54, 0xd7, 0xfd, 0x63, 0x72, 0xad, 0x00, 0xbf, 0x48, 0xe4, 0x1c, 0xe4,
			0xc6, 0x67, 0xda, 0x34, 0xca, 0x33, 0xe6, 0xd6, 0xa1, 0xa5, 0x6a, 0x8b, 0x91, 0x05, 0xa8, 0x9a,
			0x7e, 0xf9, 0x42, 0x95, 0x4d, 0x56, 0xa9, 0xf6, 0xbf, 0xa2, 0x37, 0x4e, 0x93, 0xbe, 0x7e, 0x61,
			0xb6, 0x97, 0xeb, 0x18, 0x50, 0xfc, 0xeb, 0x78, 0x5f, 0x04, 0x7c, 0x18, 0x9f, 0xcc, 0x47, 0x35,
			0x1d, 0xd3, 0x23, 0xc4, 0xa7, 0x36, 0xac, 0x6b, 0x07, 0xf9, 0x80, 0xde, 0xde, 0x3a, 0x31, 0xb1,
			0xe2, 0x2b, 0xa1, 0x19, 0x67, 0x72, 0x87, 0x5b, 0x5c, 0x16, 0x38, 0x45, 0xd5, 0xcd, 0xf7, 0x62,
			0x90, 0x86, 0x5f, 0x29, 0x35, 0xc8, 0x80, 0xb0, 0x9b, 0x4a, 0x4b, 0x65, 0x2b, 0x8a, 0x32, 0xe2,
			0x47, 0x74, 0x87, 0x74, 0x31, 0x7c, 0xde, 0xf6, 0xb1, 0x02, 0x03, 0x01, 0x00, 0x01
		};

		public override string ManagedSubjectName {
			get {
				return managedSubject;
			}
		}

		public override string ManagedIssuerName {
			get {
				return managedIssuer;
			}
		}

		public override byte[] Hash {
			get {
				return hash;
			}
		}

		public override CertificateNameInfo IssuerName {
			get {
				return issuerName;
			}
		}

		public override string IssuerNameString {
			get {
				return issuer;
			}
		}

		public override DateTime NotAfter {
			get {
				return notAfter;
			}
		}

		public override DateTime NotBefore {
			get {
				return notBefore;
			}
		}

		public override string PublicKeyAlgorithmOid {
			get {
				return Oid_Rsa;
			}
		}

		public override byte[] PublicKeyData {
			get {
				return publicKeyData;
			}
		}

		public override byte[] PublicKeyParameters {
			get {
				return EmptyPublicKeyParameters;
			}
		}

		public override byte[] SerialNumber {
			get {
				return serial;
			}
		}

		public override byte[] SerialNumberMono {
			get {
				return serialMono;
			}
		}

		public override string SignatureAlgorithmOid {
			get {
				return Oid_RsaWithSha256;
			}
		}

		public override CertificateNameInfo SubjectName {
			get {
				return subjectName;
			}
		}

		public override string SubjectNameString {
			get {
				return subject;
			}
		}

		public override int Version {
			get {
				return 3;
			}
		}
	}
}

