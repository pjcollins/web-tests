//
// TlsTestXamDevExpiredData.cs
//
// Author:
//       Martin Baulig <martin.baulig@xamarin.com>
//
// Copyright (c) 2016 Xamarin Inc. (http://www.xamarin.com)

//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
using System;

namespace Xamarin.WebTests.Resources
{
	public class TlsTestXamDevExpiredData : CertificateInfo
	{
		public TlsTestXamDevExpiredData (CertificateDataFromPEM data)
			: base (data)
		{
		}

		const string subject = "/C=US/ST=California/L=San Francisco/O=Xamarin Inc./CN=*.xamdev.com";
		const string issuer = "/C=US/O=DigiCert Inc/CN=DigiCert SHA2 Secure Server CA";
		const string managedSubject = "CN=*.xamdev.com, O=Xamarin Inc., L=San Francisco, S=California, C=US";
		const string managedIssuer = "CN=DigiCert SHA2 Secure Server CA, O=DigiCert Inc, C=US";

		internal static readonly byte[] hash = new byte[] {
			0x32, 0xa9, 0x9d, 0xc2, 0xce, 0x76, 0xe0, 0x67, 0xcc, 0x0d, 0xc0, 0x37, 0x30, 0xb8, 0x7c, 0xaa,
			0xed, 0xc3, 0xd6, 0x87
		};

		internal static readonly byte[] subject_rawData = new byte[] {
			0x30, 0x68, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31,
			0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x08, 0x13, 0x0a, 0x43, 0x61, 0x6c, 0x69, 0x66, 0x6f,
			0x72, 0x6e, 0x69, 0x61, 0x31, 0x16, 0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x07, 0x13, 0x0d, 0x53,
			0x61, 0x6e, 0x20, 0x46, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x31, 0x15, 0x30, 0x13,
			0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x0c, 0x58, 0x61, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x20, 0x49,
			0x6e, 0x63, 0x2e, 0x31, 0x15, 0x30, 0x13, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x0c, 0x2a, 0x2e,
			0x78, 0x61, 0x6d, 0x64, 0x65, 0x76, 0x2e, 0x63, 0x6f, 0x6d
		};
		internal static readonly byte[] subject_rawDataCanon = new byte[] {
			0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x0c, 0x02, 0x75, 0x73, 0x31, 0x13, 0x30,
			0x11, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x0a, 0x63, 0x61, 0x6c, 0x69, 0x66, 0x6f, 0x72, 0x6e,
			0x69, 0x61, 0x31, 0x16, 0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x0d, 0x73, 0x61, 0x6e,
			0x20, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x31, 0x15, 0x30, 0x13, 0x06, 0x03,
			0x55, 0x04, 0x0a, 0x0c, 0x0c, 0x78, 0x61, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x63,
			0x2e, 0x31, 0x15, 0x30, 0x13, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x0c, 0x2a, 0x2e, 0x78, 0x61,
			0x6d, 0x64, 0x65, 0x76, 0x2e, 0x63, 0x6f, 0x6d
		};
		internal static readonly byte[] issuer_rawData = new byte[] {
			0x30, 0x4d, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31,
			0x15, 0x30, 0x13, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x0c, 0x44, 0x69, 0x67, 0x69, 0x43, 0x65,
			0x72, 0x74, 0x20, 0x49, 0x6e, 0x63, 0x31, 0x27, 0x30, 0x25, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13,
			0x1e, 0x44, 0x69, 0x67, 0x69, 0x43, 0x65, 0x72, 0x74, 0x20, 0x53, 0x48, 0x41, 0x32, 0x20, 0x53,
			0x65, 0x63, 0x75, 0x72, 0x65, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x43, 0x41
		};
		internal static readonly byte[] issuer_rawDataCanon = new byte[] {
			0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x0c, 0x02, 0x75, 0x73, 0x31, 0x15, 0x30,
			0x13, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x0c, 0x64, 0x69, 0x67, 0x69, 0x63, 0x65, 0x72, 0x74,
			0x20, 0x69, 0x6e, 0x63, 0x31, 0x27, 0x30, 0x25, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x1e, 0x64,
			0x69, 0x67, 0x69, 0x63, 0x65, 0x72, 0x74, 0x20, 0x73, 0x68, 0x61, 0x32, 0x20, 0x73, 0x65, 0x63,
			0x75, 0x72, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x63, 0x61
		};

		static readonly CertificateNameInfo subjectName = new CertificateNameInfo (
			0x4a10a94fL, 0xf36e2b0fL, subject_rawData, subject_rawDataCanon, subject);
		static readonly CertificateNameInfo issuerName = new CertificateNameInfo (
			0x85cf5865L, 0x4bcd7fc4L, issuer_rawData, issuer_rawDataCanon, issuer);

		static readonly DateTime notBefore = new DateTime (2015, 1, 20, 0, 0, 0, DateTimeKind.Utc);
		static readonly DateTime notAfter = new DateTime (2016, 3, 25, 12, 0, 0, DateTimeKind.Utc);

		internal static readonly byte[] serial = new byte[] {
			0x0d, 0x82, 0x7e, 0x34, 0xd6, 0xdf, 0xc7, 0x8f, 0xfe, 0xb2, 0xc4, 0x24, 0x20, 0x41, 0x97, 0xf7
		};
		internal static readonly byte[] serialMono = new byte[] {
			0xf7, 0x97, 0x41, 0x20, 0x24, 0xc4, 0xb2, 0xfe, 0x8f, 0xc7, 0xdf, 0xd6, 0x34, 0x7e, 0x82, 0x0d
		};

		internal static readonly byte[] publicKeyData = new byte[] {
				0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xc4, 0x14, 0xc8, 0x85, 0xa0, 0x91, 0x18,
				0x60, 0x0a, 0x30, 0xa0, 0xb4, 0xfc, 0x54, 0x89, 0xd9, 0x59, 0x6d, 0x00, 0xfa, 0xca, 0xe4, 0x34,
				0x6e, 0x11, 0xca, 0x0c, 0x55, 0xf7, 0x2d, 0x32, 0xaf, 0xd4, 0xbf, 0xd2, 0xbe, 0x62, 0x4f, 0x37,
				0xfd, 0x99, 0x4a, 0x74, 0x7d, 0x6d, 0x03, 0xc4, 0x53, 0x9a, 0x47, 0x3b, 0x08, 0x57, 0x4f, 0xa6,
				0xe5, 0x86, 0x71, 0xb4, 0x17, 0x1a, 0xa1, 0x97, 0xda, 0x8e, 0xdb, 0xe2, 0x85, 0x27, 0xb4, 0x33,
				0xc7, 0xad, 0x0d, 0xd0, 0xb3, 0x42, 0xa5, 0x18, 0x38, 0x69, 0xbc, 0xb7, 0xf8, 0xfd, 0x93, 0x05,
				0xd6, 0x8e, 0xd8, 0x71, 0x92, 0x33, 0x12, 0x1d, 0x59, 0x46, 0x01, 0x05, 0xbf, 0xa9, 0x75, 0x6e,
				0xdb, 0xeb, 0x6c, 0x98, 0x5c, 0xf7, 0x51, 0x64, 0x6a, 0xd0, 0xc4, 0x38, 0x9d, 0xbd, 0x3f, 0x16,
				0xab, 0xe0, 0x37, 0x6c, 0xb4, 0x24, 0x81, 0x53, 0xd0, 0x43, 0xa3, 0x5a, 0x6b, 0x5e, 0xd1, 0xc5,
				0x43, 0x31, 0xcb, 0x60, 0xa0, 0xfe, 0xd2, 0xd0, 0x0b, 0x22, 0xc3, 0xf7, 0xb9, 0xdb, 0x88, 0xb0,
				0xd0, 0xd7, 0xbb, 0x12, 0xeb, 0xb4, 0xc0, 0xe1, 0xe6, 0x92, 0x71, 0xf2, 0x1e, 0x28, 0x83, 0xc3,
				0x9d, 0x5a, 0x5b, 0x85, 0xe8, 0xb5, 0x3b, 0xe5, 0xa5, 0x1f, 0x9c, 0x68, 0x78, 0x28, 0xba, 0x17,
				0xbc, 0xd2, 0x60, 0xf2, 0x92, 0xb3, 0x4c, 0x48, 0x21, 0x2f, 0xa7, 0x3a, 0xcf, 0xf1, 0x9b, 0x20,
				0xd2, 0xa0, 0x32, 0x2e, 0x25, 0xab, 0x76, 0xeb, 0x6b, 0xe8, 0xd4, 0x7d, 0x55, 0xf0, 0xfc, 0xee,
				0x25, 0x07, 0x29, 0xe3, 0x9f, 0xf0, 0xb8, 0x9b, 0xe3, 0x29, 0xbc, 0xac, 0xa3, 0x1b, 0xe5, 0x32,
				0x1b, 0xe0, 0xd3, 0xa9, 0xec, 0xae, 0x9c, 0x66, 0xbc, 0xd6, 0x30, 0x53, 0x09, 0xf7, 0x2e, 0x48,
				0x34, 0x7c, 0x4b, 0x40, 0xfa, 0xd9, 0xc0, 0x0b, 0x2b, 0x02, 0x03, 0x01, 0x00, 0x01
		};

		public override string ManagedSubjectName {
			get {
				return managedSubject;
			}
		}

		public override string ManagedIssuerName {
			get {
				return managedIssuer;
			}
		}

		public override byte[] Hash {
			get {
				return hash;
			}
		}

		public override CertificateNameInfo IssuerName {
			get {
				return issuerName;
			}
		}

		public override string IssuerNameString {
			get {
				return issuer;
			}
		}

		public override DateTime NotAfter {
			get {
				return notAfter;
			}
		}

		public override DateTime NotBefore {
			get {
				return notBefore;
			}
		}

		public override string PublicKeyAlgorithmOid {
			get {
				return Oid_Rsa;
			}
		}

		public override byte[] PublicKeyData {
			get {
				return publicKeyData;
			}
		}

		public override byte[] PublicKeyParameters {
			get {
				return EmptyPublicKeyParameters;
			}
		}

		public override byte[] SerialNumber {
			get {
				return serial;
			}
		}

		public override byte[] SerialNumberMono {
			get {
				return serialMono;
			}
		}

		public override string SignatureAlgorithmOid {
			get {
				return Oid_RsaWithSha256;
			}
		}

		public override CertificateNameInfo SubjectName {
			get {
				return subjectName;
			}
		}

		public override string SubjectNameString {
			get {
				return subject;
			}
		}

		public override int Version {
			get {
				return 3;
			}
		}
	}
}

